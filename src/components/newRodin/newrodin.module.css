/* GenrateArea */

.generateWrapper {
  width: 210px;
  height: 65px;
  border-radius: 53px;
  margin-top: calc(2 * var(--mt));
  position: relative;
  align-content: start;
  z-index: 10;
}

.generateWrapper::before {
  --border-width: 2px;
  --border-color: linear-gradient(259deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.14), rgba(255, 255, 255, 0.15));
  position: absolute;
  box-sizing: border-box;
  content: '';
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  display: block;
  border-radius: inherit;
  padding: var(--border-width);
  background: var(--border-color);
  background-clip: padding-box; 
  mask-image: linear-gradient(red, red), linear-gradient(red, red);
  mask-clip: padding-box, content-box;
  mask-composite: exclude;
  -webkit-mask-image: linear-gradient(red, red), linear-gradient(red, red);
  -webkit-mask-clip: padding-box, content-box;
  -webkit-mask-composite: exclude;
}

@property --percentage1 {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 25%;
}

@property --angle {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

@property --lightColor {
  syntax: "<color>";
  inherits: false;
  initial-value: rgba(255, 255, 255, 0.3);
}

.generateWrapper:is(:not(.gennerating):has(.generateBtn:hover), .gennerating)::after {
  opacity: 1;
  visibility: visible;
}

.generateWrapper::after {
  opacity: 0;
  --border-width: 2px;
  --angle: 0deg;
  --lightColor: rgba(255, 255, 255, 0.3);
  --border-color: conic-gradient(from var(--angle),
      rgba(255, 255, 255, 0.05)0% 30%,
      var(--lightColor) 40%,
      rgba(255, 255, 255, 0.05)50% 75%,
      var(--lightColor) 85%,
      rgba(255, 255, 255, 0.05)95%);
  position: absolute;
  box-sizing: border-box;
  content: '';
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: calc(100% + 20px);
  height: calc(100% + 20px);
  display: block;
  border-radius: inherit;
  padding: var(--border-width);
  background: var(--border-color);
  background-clip: padding-box;
  mask-image: linear-gradient(red, red), linear-gradient(red, red);
  mask-clip: padding-box, content-box;
  mask-composite: exclude;
  -webkit-mask-image: linear-gradient(red, red), linear-gradient(red, red);
  -webkit-mask-clip: padding-box, content-box;
  -webkit-mask-composite: exclude;
  transition: --angle 0.3s ease, opacity 0.3s ease;
}

.generateWrapper.gennerating::after {
  animation: hoverRotate 2s linear infinite;
}

.loader {
  background: #FFFFFF;
  border: 4px solid #f3f3f3;
  /* Light grey border */
  border-top: 4px solid #3498db;
  /* Blue border */
  border-radius: 50%;
  width: 20px;
  height: 20px;
  animation: spin 2s linear infinite;
  margin: auto;
  /* Center the loader */
}

.prompt2ImgWrapper {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  transition: opacity 0.1s ease;
  background-color: #2e2e2e;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 7px;
}

.prompt2ImgWrapper.hide {
  opacity: 0;
  visibility: hidden;
}

.prompt2ImgWrapper.show {
  opacity: 1;
  visibility: visible;
  z-index: 100;
}

.prompt2Img {
  border-radius: inherit;
  width: 100%;
  height: 100%;
}

.promptHoverWrapper {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  border-radius: inherit;
  padding: 12px 12px 8px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: flex-start;
}

.infoIconWrapper {
  width: 16px;
  height: 16px;
  cursor: pointer;
  /* background-color: #1C1C1C; */
  border-radius: 50%;
}

.infoIconWrapper svg{
  transition: color 0.3s ease;
}

.infoIconWrapper:hover svg{
  color: #ddd!important;
}

/* .bottomToolsWrapper {
  display: flex;
  align-items: center;
  gap: 8px;
  position: relative;
  z-index: 1;
} */

/* .IncorrectIconWrapper,
.correctIconWrapper {
  width: 32px;
  height: 32px;
  background-color: rgba(0, 0, 0, 0.3);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.3s ease;
  position: relative;
  overflow: hidden;
} */

/* .IncorrectIconWrapper img,
.correctIconWrapper img {
  width: 60%;
  height: 60%;
} */

.refreshIconWrapper {
  width: 56px;
  height: 32px;
  background-color: #7D3CFF;
  border-radius: 60px;
  cursor: pointer;
  transition: background-color 0.3s ease, opacity 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.refreshIconWrapper.hide {
  opacity: 0;
}

.refreshIconWrapper img {
  height: 85%;
  width: auto;
}

.refreshIconWrapper:hover {
  background-color: #925BFF;
}


.correctIconWrapper:hover::after{
  content: '';
  position: absolute;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: rgba(85, 254, 93, 1);
  z-index: -1;
  box-shadow: 0 0 10px 4px rgba(87, 255, 95, 1);
  filter: blur(5px)
}
/* .correctIconWrapper:hover{
  background-color: rgba(0,0,0,0.15);
} */

.prompt2ImgTextAreaWrapper{
  background-color: rgba(0,0,0,0.15);
  backdrop-filter: blur(10px);
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  border-radius: inherit;
  padding: 12px 12px 8px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  transition: opacity 0.3s ease;
  z-index: 101;
}

.show.prompt2ImgTextAreaWrapper {
  opacity: 1;
  visibility: visible;
  z-index: 2;
}

.hide.prompt2ImgTextAreaWrapper {
  opacity: 0;
  visibility: hidden;
}

.overlayBox {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.skeleton {
  border-radius: 8px;
  width: 100%;
  height: 100%;
  overflow: hidden;
  cursor: pointer;
  background: linear-gradient(90deg, #2f2f2f 25%, #232323 50%, #3d3d3d 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }

  100% {
    background-position: -200% 0;
  }
}

@media (min-height: 1440px) {
  .rodinContent {
    height: 80vh;
    --fs: 18px;
    --mt: 50px;
  }
}

@media (min-height: 1200px) {
  .rodinContent {
    height: 80vh;
    --fs: 18px;
    --mt: 50px;
  }
}

@media (min-height: 1080px) {
  .rodinContent {
    height: 80vh;
    --fs: 18px;
    --mt: 50px;
  }
}

@media (max-height: 1080px) {
  .rodinContent {
    height: 80vh;
    --fs: 16px;
    --mt: 40px;
  }
}

@media (max-height: 1024px) {
  .rodinContent {
    height: 80vh;
    --fs: 16px;
    --mt: 40px;
  }
}

@media (max-height: 900px) {
  .rodinContent {
    --fs: 16px;
    --mt: 10px;
  }
}

@media (max-height: 800px) {
  .rodinContent {
    height: 70vh;
    --fs: 14px;
    --mt: 30px;
  }
}

@media (max-height: 640px) {
  .rodinContent {
    height: 80vh;
    --mt: 15px;
    --fs: 12px;
  }
}

@media (max-height: 599px) {
  .rodinContent {
    height: 80vh;
    --mt: 10px;
    --fs: 12px;
  }
}


/* GenrateArea */

.generateWrapper {
  width: 210px;
  height: 65px;
  border-radius: 53px;
  margin-top: calc(2 * var(--mt));
  position: relative;
}

.generateWrapper::before {
  --border-width: 2px;
  --border-color: linear-gradient(259deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.14), rgba(255, 255, 255, 0.15));
  position: absolute;
  box-sizing: border-box;
  content: '';
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  display: block;
  border-radius: inherit;
  padding: var(--border-width);
  background: var(--border-color);
  background-clip: padding-box; 
  mask-image: linear-gradient(red, red), linear-gradient(red, red);
  mask-clip: padding-box, content-box;
  mask-composite: exclude;
  -webkit-mask-image: linear-gradient(red, red), linear-gradient(red, red);
  -webkit-mask-clip: padding-box, content-box;
  -webkit-mask-composite: exclude;
}

@property --percentage1 {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 25%;
}

@property --angle {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

@property --lightColor {
  syntax: "<color>";
  inherits: false;
  initial-value: rgba(255, 255, 255, 0.3);
}

.generateWrapper:is(:not(:is(.gennerating, .generateDisabled)):has(.generateBtn:hover), .gennerating)::after {
  opacity: 1;
  visibility: visible;
}

.generateWrapper::after {
  opacity: 0;
  --border-width: 2px;
  --angle: 0deg;
  --lightColor: rgba(255, 255, 255, 0.3);
  --border-color: conic-gradient(from var(--angle),
      rgba(255, 255, 255, 0.05)0% 30%,
      var(--lightColor) 40%,
      rgba(255, 255, 255, 0.05)50% 75%,
      var(--lightColor) 85%,
      rgba(255, 255, 255, 0.05)95%);
  position: absolute;
  box-sizing: border-box;
  content: '';
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: calc(100% + 20px);
  height: calc(100% + 20px);
  display: block;
  border-radius: inherit;
  padding: var(--border-width);
  background: var(--border-color);
  background-clip: padding-box;
  mask-image: linear-gradient(red, red), linear-gradient(red, red);
  mask-clip: padding-box, content-box;
  mask-composite: exclude;
  -webkit-mask-image: linear-gradient(red, red), linear-gradient(red, red);
  -webkit-mask-clip: padding-box, content-box;
  -webkit-mask-composite: exclude;
  transition: --angle 0.3s ease, opacity 0.3s ease;
}

.generateWrapper.gennerating::after {
  animation: hoverRotate 2s linear infinite;
}

.boxShadow {
  border-radius: inherit;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: calc(100% + 20px);
  height: calc(100% + 20px);
  box-shadow:
    0 0 5px 5px rgba(255, 255, 255, 0.1),
    inset 0 0 5px 5px rgba(255, 255, 255, 0.1);
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease;
}

.boxShadow.gennerating {
  opacity: 1;
  visibility: visible;
}

.generateWrapper:has(.generateBtn:hover)::after {
  --angle: 100deg;
}

@keyframes hoverRotate {
  0% {
    --angle: 0deg;
    --lightColor: rgba(255, 255, 255, 0.3);
  }

  50% {
    --lightColor: rgba(255, 255, 255, 0.6);
  }

  100% {
    --angle: 360deg;
    --lightColor: rgba(255, 255, 255, 0.3);
  }
}

.generateBtn {
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  border-radius: inherit;
  background: radial-gradient(66.92% 66.92% at 50.23% 50.77%, rgba(211, 211, 211, 0) 0%, rgba(211, 211, 211, 0) 40.67%, rgba(211, 211, 211, 0.14265) 75.17%, rgba(211, 211, 211, 0.315) 100%);
  position: relative;
  cursor: pointer;
  transition: width 0.3s cubic-bezier(0.31, -0.26, 1, 1.58), height 0.3s cubic-bezier(0.31, -0.26, 1, 1.58);
}

.generateBtn:is(.generateDisabled, .gennerating)::after {
  opacity: 0.5;
  width: 100px;
  height: 20px;
}

.generateBtn::after {
  position: absolute;
  left: 50%;
  top: 50%;
  width: 164px;
  height: 39px;
  transform: translate(-50%, -50%);
  content: '';
  background: linear-gradient(180deg, #28E4F0 6%, #28B4F0 100%);
  border-radius: 22px;
  filter: blur(20px);
  transition: width 0.3s ease, height 0.3s ease;
}

.generateBtn:not(.gennerating):hover {
  animation: change 0.25s ease 1 forwards;
  /* height: 60px; */
}

@keyframes change {
  0% {
    scale: 1;
  }

  40% {
    scale: 1.03;
  }

  70% {
    scale: 0.97;
  }

  100% {
    scale: 1;
  }
}

.generateBtn.default:not(.multi):hover::after {
  width: 130px;
  height: 30px;
  filter: blur(20px);
}

.generateBtn.default.multi::after {
  width: 0;
  height: 0;
  filter: blur(20px);
}

.generateBtn.default.multi .multiBox {
  opacity: 1;
  visibility: visible;
}

.generateBtn.default.multi .generateText{
  display: none;
}

.generateBtn.default:hover .weightWrapper {
  border-radius: 10px;
  opacity: 1;
  transform: translateY(-100%) scale(1);
  /* visibility: visible; */
}

.generateBtn.default:hover .circle {
  opacity: 0;
  transform: translateY(-150%) scale(2, 3);
}

.generateText {
  font-weight: bold;
  font-size: 18px;
  color: #FFFFFF;
  line-height: 21px;
  text-align: center;
  font-style: normal;
  text-transform: none;
  position: relative;
  z-index: 1;
}

.generateText:is(.generateDisabled, .gennerating) {
  color: rgba(255, 255, 255, 0.4);
}

.circle {
  width: 14px;
  height: 14px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 29px;
  position: absolute;
  right: 25px;
  top: 50%;
  transform: translateY(-50%);
  transition: opacity 0.1s ease, transform 0.1s ease;
}

.circle.show {
  opacity: 1;
  visibility: visible;
}

.circle:is(.hide, .gennerating) {
  opacity: 0;
  visibility: hidden;
}

.weightWrapper {
  position: absolute;
  right: 0;
  top: 0;
  width: 114px;
  height: 148px;
  z-index: 1000;
  transform-origin: bottom right;
  border-radius: 150px;
  transform: translate(-50%, -50%) scale(0,1.5);
  display: flex;
  flex-direction: column;
  opacity: 1;
  /* visibility: hidden; */
  transition: opacity 0.1s ease, transform 0.1s ease, border-radius 0.1s ease;
}


.multiImgTipBox{
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%,-100%);
}

.test{
  display: inline-block;
      width: 80px;
      height: 6px;
      background-color: #01AAED;
      transition: width .5s;
}

.test:hover{
  width:150px;
  cursor: pointer;
}

 .container {
  display: block;
  position: absolute;
  right: -150px;
  top: 50%;
  transform: translateY(-50%);
  cursor: pointer;
  font-size: 12px;
  user-select: none;
  display: flex;
  gap: 5px;
  align-items: center;
 }

 .checkmark {
  position: relative;
  height: 16px;
  width: 16px;
  background-color: transparent;
  border: 1px solid #fff;
  border-radius: 6px;
  transition: all 0.5s;
 }

 .checkmark.checked{
  border-color: transparent;
  background-color:  #625EFF;
 }

 .checkmark.checked::after{
  opacity: 1;
 }

 .checkmark::after{
  transition: opacity 0.5s ease;
  position: absolute;
  opacity: 0;
  top: 40%;
  left: 50%;
  transform: translate(-50%,-50%) rotate(45deg);
  display: block;
  content: "";
  width: 5px;
  height: 10px;
  border: 2px solid #fff;
  border-top-color: transparent;
  border-left-color: transparent;
  border-radius:2px;
 }

.textContainer {
  position: relative;
  display: inline-block;
}

.textItemOriginal {
  position: relative;
  top: 0;
  left: 0;
  opacity: 1;
}

.textItemNew {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 1;
}

.strikeThrough {
  position: relative;
}

.strikeThrough::after {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  height: 3px;
  background: currentColor;
  width: 0%;
  animation: strikeThroughAnimation 1s forwards;
}

@keyframes strikeThroughAnimation {
  from {
    width: 0%;
  }
  to {
    width: 100%;
  }
}

.fadeOut {
  opacity: 0;
  transition: opacity 0.5s ease-in;
}

.fadeIn {
  opacity: 1;
  transition: opacity 0.5s ease-in;
}

.emphasizedText {
  font-weight: bold;
  color: #ffffff;
}
